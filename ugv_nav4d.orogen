name "ugv_nav4d"

import_types_from "base"
import_types_from "envire_maps"
import_types_from "ugv_nav4dTypes.hpp"
typekit.opaque_type 'DiscreteTheta', 'wrappers/DiscreteTheta'

import_types_from "ugv_nav4d/TraversabilityConfig.hpp"
import_types_from "ugv_nav4d/Config.hpp"
import_types_from "ugv_nav4d/OrientedBox.hpp"

import_types_from "ugv_nav4d/DiscreteTheta.hpp"
import_types_from "ugv_nav4d/PreComputedMotions.hpp"

import_types_from "sbpl_spline_primitives/SplinePrimitivesConfig.hpp"

using_library "vizkit3d_debug_drawings"
import_types_from "vizkit3d_debug_drawings"

using_library "ugv_nav4d"
using_library "trajectory_follower"
using_library "base-lib"

task_context "PathPlanner" do
    needs_configuration

    property "maxTime", "base::Time"
    property "primConfig", "sbpl_spline_primitives::SplinePrimitivesConfig"
    property "travConfig", "ugv_nav4d::TraversabilityConfig"
    property "mobilityConfig", "ugv_nav4d::Mobility"
    property "plannerConfig", "ugv_nav4d::PlannerConfig"
    property("initialPatchRadius","double", 0.0)
    property("dumpOnError","int", 0)
    property("dumpOnSuccess","int", 0)
    property "gridOffset", "/base/Vector3d"
    
    input_port "map", spatio_temporal('/maps/grid/MLSMapKalman')
    output_port "trajectory2D", "std::vector<base/Trajectory>"
    output_port "trajectory3D", "std::vector<base/Trajectory>"

    #FIXME output of the tr map is not that easy outside of project ENTERN as several
    #      bug fixes have not been merged to orogen and the opaque_autogen does not work them on pointers.
   # output_port "tr_map", spatio_temporal('/maps/grid/TraversabilityBaseMap3d')

    output_port "planning_start", "base/samples/RigidBodyState"
    output_port "planning_goal", "base/samples/RigidBodyState"

    dynamic_output_port /^debug_/, "/boost/shared_ptr</vizkit3dDebugDrawings/CommandBuffer>"
    
    input_port "start_pose_samples", "base/samples/RigidBodyState"
    input_port "goal_pose_samples", "base/samples/RigidBodyState"

    #operation("triggerPathPlanning").
    #    arg("start_position", "base/samples/RigidBodyState"). # should be travConfig.stepHeight above the floor
    #    arg("goal_position", "base/samples/RigidBodyState"). # should be travConfig.stepHeight above the floor
    #    returns("int").
    #    doc("Triggers planning of a new path")

    #operation("triggerPathPlanning2").
    #    arg("goal_position", "base/samples/RigidBodyState"). # should be travConfig.stepHeight above the floor
    #    returns("int").
    #    doc("Triggers planning of a new path")

    operation("triggerPathPlanning").
        returns("int").
        doc("Triggers planning of a new path")
    
    runtime_states :NO_MAP,
        :GOT_MAP,
        :GOAL_INVALID,
        :START_INVALID,
        :INTERNAL_ERROR,
        :PLANNING,
        :TRAVERSABILITY_MAP_GENERATED,
        :NO_SOLUTION,
        :FOUND_SOLUTION

    
    periodic 0.1
end

task_context "AreaExploration" do
    needs_configuration
    
    property "travConfig", "ugv_nav4d::TraversabilityConfig"
    property "costConfig", "ugv_nav4d::FrontierGeneratorParameters"
    property("initialPatchRadius","double", 0.0)

    #if positive, mark a sphere of the given radius as already covered (i.e., filter it out as goal position)
    property("coverageRadius", "double", 1.0)
    property("coverageUpdateDistance", "double", 0.05)

    operation("clearPlannerMap").
        doc("Clears the internal exploration map. All obstacles will be readded by receiving the next trav map.")

    input_port "map", spatio_temporal('/maps/grid/MLSMapKalman')

    output_port('goals_out', 'std/vector<base/samples/RigidBodyState>').
        doc "Calculated goal, using x and y"
        
    output_port('goal_out_best', 'base/samples/RigidBodyState').
        doc("Just the first (best) goal of the goal_out list.")
        
#    output_port "tr_map", spatio_temporal('/maps/grid/TraversabilityBaseMap3d')

    output_port "coverage", "/maps/grid/MLSMapBase"

    input_port("pose_samples", "base/samples/RigidBodyState").
        doc "Robot pose in traversability frame"

    operation("calculateGoals").
        arg("area", "ugv_nav4d::OrientedBoxConfig").
        doc("Triggers the calculation of a new list of goals")
        
    port_driven 'map', 'pose_samples'
    
    runtime_states :NO_MAP,
        :NO_POSE,
        :PLANNING,
        :AREA_EXPLORED,
        :GOALS_GENERATED

    
    #periodic(1.0)
end


# Loads an mls map from a ply file (for testing or if you want to use a static map)
task_context "MapLoader" do

    property "path", "std::string"
    property "gridResolution", "double"
    property "gapSize", "double"
    output_port("map", spatio_temporal('/maps/grid/MLSMapKalman'))
    
    operation("publishMap").
        doc("writes the map to the port")
        
    periodic(1.0)
end


typekit do
    export_types 'ugv_nav4d/Motion'
    export_types 'std/vector</ugv_nav4d/Motion>'
end

